(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{535:function(v,t,_){"use strict";_.r(t);var a=_(8),s=Object(a.a)({},(function(){var v=this,t=v.$createElement,_=v._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"函数声明与函数表达式的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#函数声明与函数表达式的区别"}},[v._v("#")]),v._v(" 函数声明与函数表达式的区别?")]),v._v(" "),_("p",[v._v("在 Javscript 中，解析器在向执行环境中加载数据时，对函数声明和函数表达式并非是一视 同仁的，解析器会率先读取函数声明，并使其在执行任何代码之前可用（可以访问），至于 函数表达式，则必须等到解析器执行到它所在的代码行，才会真正被解析执行。")]),v._v(" "),_("h2",{attrs:{id:"javascript-的事件流模型都有什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#javascript-的事件流模型都有什么"}},[v._v("#")]),v._v(" Javascript 的事件流模型都有什么?")]),v._v(" "),_("ul",[_("li",[v._v("事件冒泡，事件开始由最具体的元素接受，然后逐级向上传播")]),v._v(" "),_("li",[v._v("事件捕捉，事件由最不具体的节点先接收，然后逐级向下，一直到最具体的")]),v._v(" "),_("li",[v._v("DOM 事件流，三个阶段：事件捕捉=>目标阶段=>事件冒泡")])]),v._v(" "),_("h2",{attrs:{id:"谈谈你对-dom-bom-的理解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#谈谈你对-dom-bom-的理解"}},[v._v("#")]),v._v(" 谈谈你对 DOM,BOM 的理解?")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("DOM")]),v._v(" 是文档对象模型，包括了获取元素，修改样式，操作元素三方面内容，也是我们进行 最多的操作，有很多兼容性写法")]),v._v(" "),_("li",[_("strong",[v._v("BOM")]),v._v(" 是浏览器对象模型，包括浏览器的一些操作，")]),v._v(" "),_("li",[v._v("window.onload,window.open 等还有浏览器事件，监听窗口的改变 onresize,监听滚动事 件 onscroll 等")])]),v._v(" "),_("h2",{attrs:{id:"href-和-src-有什么区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#href-和-src-有什么区别"}},[v._v("#")]),v._v(" href 和 src 有什么区别?")]),v._v(" "),_("ul",[_("li",[v._v("href 是文档之间的跳转")]),v._v(" "),_("li",[v._v("src 是资源的引用，将指定资源插入到 src 所在的位置")])]),v._v(" "),_("h2",{attrs:{id:"原型、原型链的原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#原型、原型链的原理"}},[v._v("#")]),v._v(" 原型、原型链的原理?")]),v._v(" "),_("ul",[_("li",[v._v("原型就是每个对象都自己的原型、我们一般访问对象的 属性和方法的时候、js 会先访问对象本身的属性和方法、如果对象没有这些属性和方法就 会访问对象对应的原型 。")]),v._v(" "),_("li",[v._v("原型链子的话就是原型、原型的原型、原型的原型的原型是一个规则组成的、一般都在继承 的时候会用。")])]),v._v(" "),_("h2",{attrs:{id:"在什么情况下会遇到跨域"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#在什么情况下会遇到跨域"}},[v._v("#")]),v._v(" 在什么情况下会遇到跨域?")]),v._v(" "),_("ul",[_("li",[v._v("在协议( http )、主机名( 192.168.1.166 )、端口( :8080 )不统一的情况下会出现跨 域问题。")])]),v._v(" "),_("h2",{attrs:{id:"解释什么是-json"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#解释什么是-json"}},[v._v("#")]),v._v(" 解释什么是 Json?")]),v._v(" "),_("ul",[_("li",[v._v("json 是一种轻量级的数据交换格式、主要格式是由 array 和 object 组成的、里面 的字段数据类型的话就 是 js 的一些基本类型。")])]),v._v(" "),_("h2",{attrs:{id:"解决跨域问题的方法-并说一下具体的实现方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#解决跨域问题的方法-并说一下具体的实现方法"}},[v._v("#")]),v._v(" 解决跨域问题的方法，并说一下具体的实现方法?")]),v._v(" "),_("ul",[_("li",[v._v("第一种：就是让后台接口文件中添加个响应头来允许指定域或所有域请求访问文件。")]),v._v(" "),_("li",[v._v("第二种：前端可以使用 "),_("strong",[v._v("JSONP")]),v._v(" 来解决( 不过后台的代码也得更改，如果问咋改的直接说不清 楚就可以 )")]),v._v(" "),_("li",[v._v("第三种：也可以使用 "),_("strong",[v._v("nginx")]),v._v(" 代理来解决、将两个域的地址都通过一个统一的地 址来转发，这样就可以避免出现跨域问题。")])]),v._v(" "),_("h2",{attrs:{id:"闭包的原理及代码和应用场景-滥用闭包造成内存泄漏-怎么处理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#闭包的原理及代码和应用场景-滥用闭包造成内存泄漏-怎么处理"}},[v._v("#")]),v._v(" 闭包的原理及代码和应用场景，滥用闭包造成内存泄漏， 怎么处理?")]),v._v(" "),_("p",[v._v("函数嵌套函数、函数内部嵌套的函数可以访问外部函数的变量。 函数内部如果访问外部的变量，则外部的变量不会被垃圾回收机制回收")]),v._v(" "),_("ul",[_("li",[v._v("优点\n"),_("ul",[_("li",[v._v("保护函数内的变量安全，加强封装性")]),v._v(" "),_("li",[v._v("在内存中维持一个变量")])])]),v._v(" "),_("li",[v._v("缺点\n"),_("ul",[_("li",[v._v("闭包有一个非常严重的问题，那就是内存浪费问题，这个内存浪费不仅仅是因为它常驻 内寸，更重要的是对闭包使用不当会照成无用内存的产生。")]),v._v(" "),_("li",[v._v("解决方法是，在退出函数之前，将不使用的局部变量全部删除")])])]),v._v(" "),_("li",[v._v("应用场景\n"),_("ul",[_("li",[v._v("封装公共插件")]),v._v(" "),_("li",[v._v("函数外部想使用函数内部的变量是，使用闭包")]),v._v(" "),_("li",[v._v("解决 for 循环绑定事件，内部拿不到外部 i 的值")])])])]),v._v(" "),_("h2",{attrs:{id:"什么是-jsonp-是用来干什么的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是-jsonp-是用来干什么的"}},[v._v("#")]),v._v(" 什么是 jsonp，是用来干什么的?")]),v._v(" "),_("ul",[_("li",[v._v("jsonp 是一种请求数据的一种方式，可用于解决主流浏览器的跨域数 据访问的问题")])])])}),[],!1,null,null,null);t.default=s.exports}}]);